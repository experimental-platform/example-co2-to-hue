<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <title>Experimental Platform "CO2 to Hue" example</title>
    <link rel="stylesheet" href="css/bootstrap.min.css" type="text/css" media="all" />
    <link rel="stylesheet" href="css/c3.min.css" type="text/css" media="all" />
    <link rel="stylesheet" href="css/rickshaw.min.css" type="text/css" media="all" />
    <style type="text/css" media="all">
      .panel.closed .panel-body {
        display: none;
      }

      #settings {
        outline: none;
      }

      #hueColor {
        width: 94px;
        margin: 0 auto;
      }

      .dummySensors {
        margin-bottom: 100px;
      }

      #graph {
        position: relative;
        left: 40px;
      }

      #y_axis {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 40px;
      }

      #graphContainer {
        position: relative;
      }

      #ppmDescription {
        margin-top: 50px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1 class="page-header">CO2 Sensor to Hue connector</h1>

      <div class="alert alert-warning">
        <span class="glyphicon glyphicon-exclamation-sign"></span>
        If you don't have a Hue or a CO2 sensor at hand you can use <a href="#dummySensors">the dummy sensor / Hue below!</a>
      </div>

      <div id="settingsPanel" class="panel panel-default closed">
        <div class="panel-heading">
          <h2 class="panel-title"><button class="btn btn-default settingsToggle"><span class="glyphicon glyphicon-cog"></span> Settings</button></h2>
        </div>
        <div class="panel-body">
          <form class="form" id="settingsForm">
            <div class="form-group">
              <label for="authToken">Hue Auth Token:</label>
              <input type="text" name="authToken" class="form-control" value="<%= authToken %>">
            </div>
            <div class="form-group">
              <label for="bridgeAddress">Bridge IP:</label>
              <input type="text" name="bridgeAddress" class="form-control" id="bridgeAddress" value="<%= bridgeAddress %>"></input>
            </div>
            <div class="form-group">
              <label for="controllingSensor">Controlling:</label>
              <select name="controllingSensor" id="controllingSensorSelect" class="form-control">
                <option value="<%= fakeSensorID %>" selected="<%= fakeSensorID === controllingSensor %>"><%= fakeSensorID %></option>
              </select>
            </div>
            <button type="submit" id="settingsButton" class="btn btn-success settingsToggle" data-toggle-delay="70">Save</button>
          </form>
        </div>
      </div>

      <div class="row">
        <div class="col-md-11">
          <strong>Current PPM: </strong><span id="currentPPM"></span>
        </div>
      </div>
      <div class="row">
        <div id="graphContainer" class="col-md-11">
          <div id="y_axis"></div>
          <div id="graph"></div>
        </div>
      </div>

      <div class="row" id="ppmDescription">
        <div class="col-md-12 well">
          <ol>
            <li>A co2 concentration of 500 is considered normal.</li>
            <li>A ppm of 1000 and higher already impacts your productivity and overall well being.</li>
            <li>A ppm of 1500 and higher is considered unhealthy.</li>
            <li>A ppm of 5000 and higher is... well... you should better not be in this room</li>
          </ol>
        </div>
      </div>

      <hr/>

      <div class="row dummySensors">
        <div class="col-md-6">
          <h1 class="page-header">Dummy CO2 sensor</h1>
					<a name="dummySensors"></a>
          <dl>
            <dt>Sensor ID</dt>
            <dd><%= fakeSensorID %></dd>
          </dl>
          <div id="gauge"></div>
        </div>

        <div class="col-md-6">
          <h1 class="page-header">Dummy Hue bulb</h1>
          <dl>
            <dt>Bridge Adress</dt>
            <dd><%= fakeBridgeAddress %></dd>
            <dt>Auth Token</dt>
            <dd>342716561e24f19024c9edfb8f89eee</dd>
          </dl>
          <div id="hueColor">
            <img src="img/hue.png">
          </div>
        </div>
    </div>
    <script src="socket.io/socket.io.js"></script>
    <script src="js/jquery-2.2.0.min.js"></script>
    <script src="js/d3.min.js"></script>
    <script src="js/c3.min.js"></script>
    <script src="js/tinycolor.js"></script>
    <script src="js/rickshaw.min.js"></script>
    <script type="text/javascript" charset="utf-8">
      var socket = io.connect("/", {path: document.location.pathname + 'socket.io'});

      var sensors = {};
      var maxGraphSize = 100; // maximum number of elements in the graph
      var series = [];

      var graph = new Rickshaw.Graph({
        element: document.querySelector("#graph"),
        height: 250,
        renderer: 'line',
        series: series
      });

      var x_axes = new Rickshaw.Graph.Axis.Time( { graph: graph } );
      var y_axis = new Rickshaw.Graph.Axis.Y( {
        graph: graph,
        orientation: 'left',
        tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
        element: document.getElementById('y_axis'),
      } );

      var hoverDetail = new Rickshaw.Graph.HoverDetail( {
        graph: graph,
        xFormatter: function(x) { return x + "seconds" },
        yFormatter: function(y) { return Math.floor(y) + "ppm" }
      } );

      graph.render();

      var buildSensorSerie = function (sensorName) {
        return {
          color: 'steelblue',
          data: [],
          name: sensorName
        };
      }

      var counter = 1;
      socket.on('reading', function (data) {
        for (var sensorID in data) {
          var sensorData;
          if (!(sensorID in sensors)) {
            var newSensorSerie = buildSensorSerie(sensorID);
            sensors[sensorID] = newSensorSerie.data;
            series.push(newSensorSerie);
            if (sensorID !== '<%= fakeSensorID %>') {
              var optionTag = $('<option>', {
                value: sensorID,
                text: sensorID,
                selected: sensorID === '<%= controllingSensor %>'
              });
              $("#controllingSensorSelect").append(optionTag);
            }
          }
          sensorData = sensors[sensorID];
          sensorData.splice(0, sensorData.length - maxGraphSize);
          sensorData.push({x: counter, y: data[sensorID]});
        }
        //$("#currentPPM").html(data);
        counter++;
			});

      setInterval(function () {
        graph.update();
      }, 3000);

      var gauge = c3.generate({
        bindto: '#gauge',
        data: {
          columns: [['ppm', 500]],
          type: 'gauge'
        },
        gauge: {
          label: {
            format: function(value, ratio) {
              return value;
            }
          },
          max: 2000,
          units: 'ppm'
        },
        color: {
          pattern: ['#00A043', '#FFFF00', '#FF0000'],
          threshold: {
            unit: 'value',
            values: [1000, 1500, 3000]
          }
        },
        size: {
          height: 180
        }
      });

      socket.on('co2', function (data) {
        // console.log(data);
        var ppm = parseInt(data.value);
        gauge.load({columns: [['ppm', ppm]]});
      });
      socket.on('hue', function (data) {
        var color = tinycolor({h: Math.floor(data.hue / 182), s: data.sat, v: data.bri});
        $('#hueColor').css('backgroundColor', '#' + color.toHex());
        // console.log(data);
      });

      $('#settingsButton').on('click', function (e) {
        e.preventDefault();
        $.post('settings', $('#settingsForm').serialize());
      });

      $(function () {
        $('.settingsToggle').on('click', function(e) {
          var toggleDelay = $(this).attr('data-toggle-delay') || 0;
          $('#settingsPanel').find(".panel-body").toggle(toggleDelay);
        });
      });
    </script>
  </body>
</html>
